        - struct camera 
        -     origin::Vector{Float64}
        -     lower_left_corner::Vector{Float64}
        -     horizontal::Vector{Float64}
        -     vertical::Vector{Float64}
        -     u::Vector{Float64}
        -     v::Vector{Float64}
        -     w::Vector{Float64}
        -     lens_radius::Float64
        -     function camera(lookfrom, lookat, vup, vfov, aspect_ratio, aperture, focus_dist)
        0         theta = vfov * ( pi / 180 )
        0         h = tan(theta / 2)
        0         viewport_height = 2.0 * h
        0         viewport_width = aspect_ratio * viewport_height
        - 
        0         w = (lookfrom - lookat) / norm(lookfrom - lookat)
        0         u = (cross(vup, w)) / norm(cross(vup, w))
        0         v = cross(w, u) 
        - 
        -         origin = lookfrom
        0         horizontal = focus_dist * viewport_width * u
        0         vertical = focus_dist * viewport_height * v
        0         lower_left_corner = origin - (horizontal / 2) - (vertical / 2) - (focus_dist * w)
        - 
        0         lens_radius = aperture / 2
        0         new(origin, lower_left_corner, horizontal, vertical, u, v, w, lens_radius)
        -     end
        - end 
        - 
        - function get_ray(cam::camera, u::Float64, v::Float64)
458360000     rd = cam.lens_radius * random_in_unit_disk()
720000000     offset = (cam.u * rd[1]) + (cam.v * rd[2])
        0     ray(
        -         cam.origin + offset, 
        -         cam.lower_left_corner + (u * cam.horizontal) + (v * cam.vertical) - cam.origin - offset
        -     )
        - end
