
@article{10.1145/310930.310970,
  author     = {Greenberg, Donald P.},
  title      = {A framework for realistic image synthesis},
  year       = {1999},
  issue_date = {Aug. 1999},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {42},
  number     = {8},
  issn       = {0001-0782},
  url        = {https://doi.org/10.1145/310930.310970},
  doi        = {10.1145/310930.310970},
  journal    = {Commun. ACM},
  month      = {aug},
  pages      = {44-53},
  numpages   = {10}
}

@misc{rosu2020easypbr,
  title         = {EasyPBR: A Lightweight Physically-Based Renderer},
  author        = {Radu Alexandru Rosu and Sven Behnke},
  year          = {2020},
  eprint        = {2012.03325},
  archiveprefix = {arXiv},
  primaryclass  = {cs.GR}
}

@article{10.1145/3550454.3555463,
  author     = {Zheng, Shaokun and Zhou, Zhiqian and Chen, Xin and Yan, Difei and Zhang, Chuyan and Geng, Yuefeng and Gu, Yan and Xu, Kun},
  title      = {LuisaRender: A High-Performance Rendering Framework with Layered and Unified Interfaces on Stream Architectures},
  year       = {2022},
  issue_date = {December 2022},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {41},
  number     = {6},
  issn       = {0730-0301},
  url        = {https://doi.org/10.1145/3550454.3555463},
  doi        = {10.1145/3550454.3555463},
  abstract   = {The advancements in hardware have drawn more attention than ever to high-quality offline rendering with modern stream processors, both in the industry and in research fields. However, the graphics APIs are fragmented and existing shading languages lack high-level constructs such as polymorphism, which adds complexity to developing and maintaining cross-platform high-performance renderers. We present LuisaRender1, a high-performance rendering framework for modern stream-architecture hardware. Our main contribution is an expressive C++-embedded DSL for kernel programming with JIT code generation and compilation. We also implement a unified runtime layer with resource wrappers and an optimized Monte Carlo renderer. Experiments on test scenes show that LuisaRender achieves much higher performance than existing research renderers on modern graphics hardware, e.g., 5--11\texttimes{} faster than PBRT-v4 and 4--16\texttimes{} faster than Mitsuba 3.},
  journal    = {ACM Trans. Graph.},
  month      = {nov},
  articleno  = {232},
  numpages   = {19},
  keywords   = {stream architecture, rendering framework, cross-platform renderer}
}

@article{Jakob2020DrJit,
  author  = {Wenzel Jakob and SÃ©bastien Speierer and Nicolas Roussel and Delio Vicini},
  title   = {Dr.Jit: A Just-In-Time Compiler for Differentiable Rendering},
  journal = {Transactions on Graphics (Proceedings of SIGGRAPH)},
  volume  = {41},
  number  = {4},
  year    = {2022},
  month   = jul,
  doi     = {10.1145/3528223.3530099}
}

@article{Pal2020,
  doi = {10.21105/jcon.00037},
  url = {https://doi.org/10.21105/jcon.00037},
  year = {2020},
  publisher = {The Open Journal},
  volume = {1},
  number = {1},
  pages = {37},
  author = {Avik Pal},
  title = {RayTracer.jl: A Differentiable Renderer that supports Parameter Optimization for Scene Reconstruction},
  journal = {Proceedings of the JuliaCon Conferences}
}