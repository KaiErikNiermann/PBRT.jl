{
	"nodes":[
		{"id":"34cf9b085e29b45b","type":"group","x":1520,"y":-40,"width":2131,"height":1800,"label":"FFI based interop"},
		{"id":"253b229fbd052d0f","type":"group","x":-3021,"y":-860,"width":1635,"height":1090,"label":"IDL based interop"},
		{"id":"4076c4e1f4210fd3","type":"group","x":2747,"y":629,"width":884,"height":886,"label":"WASM"},
		{"id":"02f1fc2e5fe9f431","type":"group","x":-1440,"y":1040,"width":1043,"height":315,"label":"VM backings"},
		{"id":"30468a5d455b8c95","type":"group","x":-700,"y":-415,"width":960,"height":293,"label":"meta-compilaiton approaches"},
		{"id":"514e150b1b1152e8","type":"group","x":2880,"y":1140,"width":731,"height":355,"label":"C++ to web"},
		{"id":"61b3cbd05c7fac58","type":"group","x":-2501,"y":-840,"width":738,"height":195,"label":"other comm methods"},
		{"id":"afb0e9fa9073c691","type":"group","x":2880,"y":-20,"width":495,"height":198,"label":"apple development"},
		{"id":"cb9e9621dfc90783","type":"group","x":2200,"y":-20,"width":460,"height":210,"label":"chromium/google shit"},
		{"id":"e22c344c65dd4cfb","type":"group","x":379,"y":-360,"width":981,"height":90,"label":"representation models"},
		{"id":"379d18d68e32d181","type":"group","x":-560,"y":160,"width":578,"height":100,"label":"execution methods"},
		{"id":"b9fa352103d33663","type":"text","text":"Partial Evaluation meta-compilation\n- evaluator resolves parts of program that do not depend on unknown runtime information (kinda like precompilation maybe?) allows for agressive optimizations","x":-129,"y":-395,"width":332,"height":233},
		{"id":"3c34b150db9b3283","type":"text","text":"Truffle OSM","x":399,"y":-340,"width":295,"height":50},
		{"id":"f58aa2de5f41b39e","type":"text","text":"Common Language Interface","x":720,"y":-340,"width":295,"height":50},
		{"id":"15eeb6500794a4a4","type":"text","text":"glue code/native interface","x":1033,"y":-340,"width":295,"height":50},
		{"id":"4d9b7d433c518374","type":"file","file":"papers/pppj14-om.pdf","x":920,"y":-789,"width":400,"height":281},
		{"id":"10dda29fab458f48","type":"file","file":"papers/thrift-20070401.pdf","x":-2016,"y":-295,"width":400,"height":325},
		{"id":"6729e9b28a1d824d","type":"text","text":"Thrift","x":-1941,"y":-466,"width":250,"height":60},
		{"id":"78976f9f9743e5f9","type":"text","text":"WebIDL\n- C++ <-> JavaScript","x":-1656,"y":-553,"width":250,"height":118},
		{"id":"49d43a9d99829b60","type":"text","text":"Other misc methods of IPC","x":-2044,"y":-772,"width":260,"height":80},
		{"id":"04159db2d6bf175d","type":"text","text":"self optimizing AST interpreter\nhttps://dl.acm.org/doi/abs/10.1145/2480360.2384587","x":-284,"y":180,"width":270,"height":60},
		{"id":"e647b7bdadf56122","type":"text","text":"Domain Specific Languages\n- can be used to avoid the burden of cross-language shit by simplifying stuff\n- https://github.com/LuisaGroup/LuisaCompute","x":-291,"y":1218,"width":490,"height":180},
		{"id":"40a3b570ce703e23","type":"text","text":"GraalVM (Truffle implementation framework)\n- shits out compatible but not necessarily equal IR and uses dynamic compilation\n- is alot faster then all other approaches and allows for arbitrary language interop but obviously requires language implementations to actually shit out the AST\n- Languages \n\t- Graal.js\n\t- Graal.python\n\t- Graal.R \n\t- Graal.Ruby \n\t- Truffle.C\n\t- gCUDA","x":-183,"y":373,"width":440,"height":430},
		{"id":"c9e8b2745bfdb3be","type":"text","text":"Bytecode Interpreter","x":-540,"y":180,"width":250,"height":60},
		{"id":"c19b3f0bd9ee13ee","type":"text","text":"LLVM support\n- sulong ","x":-540,"y":410,"width":250,"height":90},
		{"id":"0ecbf909d815588d","type":"file","file":"papers/The Concept of a Supercompiler.pdf","x":-163,"y":-2120,"width":400,"height":260},
		{"id":"aa1aab46e3db1b1f","type":"file","file":"papers/rustep13jan22andreiklimov.pdf","x":347,"y":-968,"width":400,"height":320},
		{"id":"0b4be4e95f15a856","type":"file","file":"papers/MITPress89-Ch4.pdf","x":494,"y":-1373,"width":400,"height":292},
		{"id":"5b6d3e29cea4d162","type":"file","file":"papers/pics.pdf","x":920,"y":-1287,"width":400,"height":280},
		{"id":"4ed88371083aa485","type":"text","text":"https://dl.acm.org/doi/abs/10.1145/2480360.2384587","x":-328,"y":-40,"width":359,"height":80},
		{"id":"5a944679fcbfeeb7","type":"text","text":"Tracing meta-compilation\n- trace the interpreter instead of tracing a concrete program this makes the JIT-compiler a meta-compiler that can be used for different language implemenentations","x":-665,"y":-395,"width":332,"height":233},
		{"id":"65e577b5c65a6ead","type":"file","file":"papers/1409.0757v3.pdf","x":-415,"y":-1373,"width":400,"height":226},
		{"id":"2829552b12ab7d0b","type":"file","file":"papers/3-540-11980-9_13.pdf","x":80,"y":-1476,"width":400,"height":273},
		{"id":"46a7daf8f8ce22c4","type":"text","text":"supercompilation","x":-62,"y":-1600,"width":198,"height":60},
		{"id":"f06ba3014020f793","type":"file","file":"papers/supercomp-by-eval.pdf","x":-580,"y":-1880,"width":400,"height":260},
		{"id":"8e56de0622673567","type":"file","file":"papers/pldi17-truffle.pdf","x":-149,"y":-988,"width":400,"height":340},
		{"id":"1c287270c32ae8ad","type":"file","file":"papers/bolz_tratt__the_impact_of_metatracing_on_vm_design_and_implementation 3.pdf","x":-738,"y":-1040,"width":405,"height":281},
		{"id":"bc9ea1f0d7d24c11","type":"file","file":"papers/oopsla15-marr-ducasse-meta-tracing-vs-partial-evaluation 1.pdf","x":-1207,"y":-1064,"width":394,"height":281},
		{"id":"7283ac82507180c7","type":"file","file":"papers/ECOOP16-DS.pdf","x":-615,"y":603,"width":400,"height":200},
		{"id":"d7269b3cbd04faf4","type":"file","file":"papers/oopsla23-larose-et-al-ast-vs-bytecode-interpreters-in-the-age-of-meta-compilation.pdf","x":-1353,"y":80,"width":400,"height":240},
		{"id":"7ea007e2f86ca3ed","type":"file","file":"papers/RPython_a_Step_Towards_Reconciling_Dynamically_and.pdf","x":-1840,"y":423,"width":617,"height":417},
		{"id":"62d32d2234aba4ca","type":"text","text":"Java HotSpot VM with an integrated JIT compiler ","x":-720,"y":1070,"width":250,"height":80},
		{"id":"21db41be47a1dc44","type":"text","text":"Virtual Machines","x":-1032,"y":1080,"width":250,"height":60},
		{"id":"62cd518c32f352c0","type":"text","text":"FastVM\nhttps://github.com/FastVM/minivm","x":-1420,"y":1060,"width":338,"height":100},
		{"id":"8122b86fd2fcfcca","type":"text","text":"HVM for parallel computing\nhttps://github.com/HigherOrderCO/HVM","x":-1389,"y":1236,"width":381,"height":80},
		{"id":"2a34dd40cf46f18b","type":"text","text":"RPython \n- seems to take an interpreter for a language written in RPython, then applies *meta-tracing* JIT compilers to the interpreter itself\n- Languages\n\t- PyPy\n\t- Pyprolog\n\t- Pixie (discontinued)\n- Does not appear to have an interop mechanisms","x":-1127,"y":455,"width":440,"height":355},
		{"id":"b6eeb74cc8e8e60c","type":"text","text":"JS (seems to be limited)/TS probably\nhttps://rustwasm.github.io/book/reference/js-ffi.html\n- wasm-binding : rust <-> wasm interactions \n- wasm-pack : rust -> wasm compilation","x":2807,"y":649,"width":467,"height":148},
		{"id":"d1174af4ddc53320","type":"text","text":"WASM Canonical ABI\n- Rust \n- JavaScript/TS \n- Python \n- C/C++ (I think)\n- Go ","x":2900,"y":848,"width":280,"height":212},
		{"id":"5d4fb0a0cb320ba9","type":"text","text":"Babel\n- uses Scientific Interface Definition Language (SIDL)\n- supports interop with \n\t- C/C++ \n\t- Fortran 77, 90/95, 03/08\n\t- Java \n\t- Python","x":-3001,"y":-472,"width":480,"height":255},
		{"id":"7db8a30ecb51b681","type":"file","file":"papers/20000109859.pdf","x":-2501,"y":-320,"width":430,"height":530},
		{"id":"a5d484a271b4c573","type":"text","text":"COBRA","x":-2396,"y":-494,"width":250,"height":50},
		{"id":"25e247af6edde326","type":"text","text":"Component Object Model (COM)","x":-3001,"y":-630,"width":250,"height":60},
		{"id":"bfea9e8ea14b1e8c","type":"text","text":"Interface Definition Languages\n- used to describe data types and interfaces in language independent ways","x":-2461,"y":-810,"width":380,"height":155},
		{"id":"8251f04cfb63e1ec","type":"text","text":"C++","x":2220,"y":0,"width":120,"height":60},
		{"id":"4b6685a698c83a60","type":"text","text":"C++","x":2900,"y":-1,"width":120,"height":56},
		{"id":"275c6fb82ced8ddd","type":"text","text":"Objective-C","x":3105,"y":-1,"width":250,"height":56},
		{"id":"66c5e793340a9152","type":"text","text":"C","x":2511,"y":0,"width":129,"height":60},
		{"id":"56bd2288db00c1d7","type":"text","text":"Swift","x":2980,"y":210,"width":250,"height":50},
		{"id":"b46995e368518f62","type":"text","text":"JS/TS and WASM\nhttps://github.com/leaningtech/cheerp-compiler","x":2900,"y":1160,"width":314,"height":112},
		{"id":"fab1ca3ecd541c0f","type":"text","text":"C++","x":3214,"y":1424,"width":127,"height":51},
		{"id":"2b7912f0e6f79ea9","type":"text","text":"JS WASM\nhttps://emscripten.org/","x":3341,"y":1186,"width":250,"height":60},
		{"id":"40308c22624cce59","type":"text","text":"Metaprogramming techniques\n- Haxe programming language","x":483,"y":1249,"width":351,"height":118},
		{"id":"94c323771a302113","type":"text","text":"Multi-Language Source Code\n- seems to be based on the idea of combining two languages at their source code level .","x":297,"y":1000,"width":500,"height":140},
		{"id":"432b8480f31c5b85","type":"text","text":"SPUR (discontinued seemingly)\n- seems to use meta-tracing techniques with the CLI as the common rep but doesn't seem to have ever been put into use or anything","x":317,"y":120,"width":460,"height":180},
		{"id":"03b13880de646159","type":"file","file":"papers/SPUR_a_trace-based_JIT_compiler_for_CIL (2).pdf","x":659,"y":401,"width":400,"height":224},
		{"id":"e2a462bb97923307","type":"text","text":"Common Language Runtime\n- shits out language into a common object oriented class model \n- languages like Visual Basic, Visual C++, C# can be used together using this method","x":951,"y":120,"width":460,"height":180},
		{"id":"e17d7a115e560b90","type":"text","text":"Foreign Function Interface\n- ADA - something ?\n- C++ - **no boilerplate**\n\t- trivial to C \n\t- IDL to JS \n- Clean - **uses glue code**\n\t- C\n- Common Lisp - something ?\n- D - same thing as C++\n- Dynamic Langs \n\t- Python, Perl, Tcl, Ruby\n- Factor \n\t- FFI to Fortran, C, Objective-C\n- Go\n\t- trivial to C\n- Java\n\t- via JNA/JNR no boilerplate code to call C/C++\n- Nim\n\t- FFI to C/C++ and JS \n- JavaScript \n\t- via Deno/Bun you can do FFI shit\n\t- bun only supports primitive stuff, uses TinyCC to jit C type conversion funcs\n- Julia \n\t- ccall to Fortran and C \n\t- for C++ Jluna/CxxWrap\n- PHP \n\t- FFI to C \n- Python \n\t- ctypes and cffi \n\t- c++ interop with Boost.python -> pybind11 (based on Boost ideas)\n\t- Rust/WASM support via https://github.com/RustPython/RustPython\n- P/invoke \n\t- interface between Microsoft CLR and native\n- Racket \n\t- FFI based on macros\n-  Raku \n\t- FFI to a bunch of shit \n- Ruby \n\t- FFI through ffi gem or fiddle \n- Rust - unstable ABI\n\t- FFI via standard ABIs, also lib for interfacing with Elixir\n\t- Cxx for C++\n\t- does not support extern generics \n- Visual Basic \n\t- declarative syntax to call C \n- Wolfram Language \n\t- WSTP to call other languages \n- zig \n\t- FFI to C using cImport function\n- Swift - stable ABI\n\t- has trivial interop with C\n\t- does support extern generics\n- Dart \n\t- C interop with dart::ffi \n\t- IOS interop using ffi aswell \n\t- Android interop: using JNI \n- React Native \n\t- native modules thing to interop with native IOS and android shit","x":1540,"y":20,"width":480,"height":1720},
		{"id":"ec0ead682eea578d","type":"text","text":"Application Binary Interface \n- Memory layout and calling conventions of an executable \n- FFIs are user code which act as a transition layer between different ABIs\n- **stable ABI**\n\t- an ABI is stable if the compiler produces the same ABI for an executable across versions \n\t- info : https://slightknack.github.io/rust-abi-wiki/intro/what_is_an_ABI.html","x":2085,"y":797,"width":555,"height":303},
		{"id":"b751d66f931ec651","type":"text","text":"Key challenge: Polymorphic Generics\nhttps://faultlore.com/blah/swift-abi/#polymorphic-generics","x":2101,"y":1152,"width":523,"height":96},
		{"id":"38c73acdb834bfe7","type":"text","text":"Rust \nhttps://security.googleblog.com/2024/02/improving-interoperability-between-rust-and-c.html\nhttps://security.googleblog.com/2021/06/rustc-interop-in-android-platform.html\nhttps://security.googleblog.com/2023/01/supporting-use-of-rust-in-chromium.html\n- cross language LTO\n- https://www.chromium.org/Home/chromium-security/memory-safety/rust-and-c-interoperability/\n- https://blog.llvm.org/2019/09/closing-gap-cross-language-lto-between.html","x":2200,"y":210,"width":460,"height":390},
		{"id":"531ffd5c19e47084","x":928,"y":-1820,"width":400,"height":400,"type":"file","file":"papers/9810010v2.pdf"},
		{"id":"f464c620669df2ff","x":294,"y":-2320,"width":400,"height":400,"type":"file","file":"papers/10.1007-3-540-47018-2.pdf"}
	],
	"edges":[
		{"id":"b571b6cad513f1fb","fromNode":"3c34b150db9b3283","fromSide":"bottom","toNode":"40a3b570ce703e23","toSide":"top"},
		{"id":"a5487a499341c7ce","fromNode":"f58aa2de5f41b39e","fromSide":"bottom","toNode":"e2a462bb97923307","toSide":"top"},
		{"id":"c34e86911ff20d70","fromNode":"e17d7a115e560b90","fromSide":"left","toNode":"94c323771a302113","toSide":"right","label":"can enable"},
		{"id":"166c63efbeb58430","fromNode":"e647b7bdadf56122","fromSide":"right","toNode":"94c323771a302113","toSide":"left","label":"can enable"},
		{"id":"43100bdb3e7f37d0","fromNode":"5a944679fcbfeeb7","fromSide":"bottom","toNode":"2a34dd40cf46f18b","toSide":"top","label":"applied in"},
		{"id":"2960271da5d5dad3","fromNode":"b9fa352103d33663","fromSide":"bottom","toNode":"40a3b570ce703e23","toSide":"top"},
		{"id":"59472bc7d7446a7d","fromNode":"15eeb6500794a4a4","fromSide":"bottom","toNode":"e17d7a115e560b90","toSide":"top"},
		{"id":"2168a3d808281bb3","fromNode":"40a3b570ce703e23","fromSide":"bottom","toNode":"94c323771a302113","toSide":"top","label":"can probably enable"},
		{"id":"e0cddb1657e0f3e0","fromNode":"e2a462bb97923307","fromSide":"bottom","toNode":"94c323771a302113","toSide":"right","label":"??"},
		{"id":"4609e093c34a2e54","fromNode":"40308c22624cce59","fromSide":"left","toNode":"e647b7bdadf56122","toSide":"right"},
		{"id":"7ce3e77738c38fd5","fromNode":"40308c22624cce59","fromSide":"right","toNode":"e17d7a115e560b90","toSide":"left","label":"can improve"},
		{"id":"66056108326b8fd1","fromNode":"f58aa2de5f41b39e","fromSide":"bottom","toNode":"432b8480f31c5b85","toSide":"top"},
		{"id":"fdd6935edec7e25c","fromNode":"432b8480f31c5b85","fromSide":"bottom","toNode":"94c323771a302113","toSide":"top","label":"??"},
		{"id":"efcc16e89cf9763b","fromNode":"04159db2d6bf175d","fromSide":"bottom","toNode":"40a3b570ce703e23","toSide":"top"},
		{"id":"fe2a5483e91b3f0f","fromNode":"40a3b570ce703e23","fromSide":"left","toNode":"c19b3f0bd9ee13ee","toSide":"right"},
		{"id":"6d850ed05c009882","fromNode":"c9e8b2745bfdb3be","fromSide":"bottom","toNode":"2a34dd40cf46f18b","toSide":"top"},
		{"id":"288e642ca496e1d7","fromNode":"c9e8b2745bfdb3be","fromSide":"bottom","toNode":"c19b3f0bd9ee13ee","toSide":"top"},
		{"id":"465ffaf2014223da","fromNode":"bc9ea1f0d7d24c11","fromSide":"bottom","toNode":"30468a5d455b8c95","toSide":"top","label":"compares"},
		{"id":"c6654631961f7c6f","fromNode":"1c287270c32ae8ad","fromSide":"bottom","toNode":"30468a5d455b8c95","toSide":"top","label":"describes impact of"},
		{"id":"11bd7fe01f130161","fromNode":"4d9b7d433c518374","fromSide":"bottom","toNode":"3c34b150db9b3283","toSide":"top","label":"describes"},
		{"id":"f3b16fe0e4db492d","fromNode":"7ea007e2f86ca3ed","fromSide":"right","toNode":"2a34dd40cf46f18b","toSide":"left"},
		{"id":"8598e1acf9c02910","fromNode":"4d9b7d433c518374","fromSide":"top","toNode":"5b6d3e29cea4d162","toSide":"bottom","label":"uses caching described in (for inheritance stuff)"},
		{"id":"e707ab75face481a","fromNode":"40a3b570ce703e23","fromSide":"bottom","toNode":"62d32d2234aba4ca","toSide":"right"},
		{"id":"952d43b6bbe19722","fromNode":"4ed88371083aa485","fromSide":"bottom","toNode":"04159db2d6bf175d","toSide":"top","label":"describes"},
		{"id":"679b967c700ab89c","fromNode":"7283ac82507180c7","fromSide":"top","toNode":"c19b3f0bd9ee13ee","toSide":"bottom"},
		{"id":"573927762dbbd871","fromNode":"d7269b3cbd04faf4","fromSide":"right","toNode":"379d18d68e32d181","toSide":"left","label":"compares"},
		{"id":"b3d6de525d80c939","fromNode":"03b13880de646159","fromSide":"left","toNode":"432b8480f31c5b85","toSide":"bottom"},
		{"id":"871f635a155579a2","fromNode":"e17d7a115e560b90","fromSide":"right","toNode":"ec0ead682eea578d","toSide":"left"},
		{"id":"4144e71b68596b03","fromNode":"bfea9e8ea14b1e8c","fromSide":"bottom","toNode":"5d4fb0a0cb320ba9","toSide":"top"},
		{"id":"c36abad1f0402f76","fromNode":"bfea9e8ea14b1e8c","fromSide":"bottom","toNode":"a5d484a271b4c573","toSide":"top"},
		{"id":"5e55eb170d7336bd","fromNode":"bfea9e8ea14b1e8c","fromSide":"bottom","toNode":"6729e9b28a1d824d","toSide":"top"},
		{"id":"b5c4928958d07c30","fromNode":"10dda29fab458f48","fromSide":"top","toNode":"6729e9b28a1d824d","toSide":"bottom","label":"describes"},
		{"id":"ce6b367fe5c346d9","fromNode":"7db8a30ecb51b681","fromSide":"top","toNode":"a5d484a271b4c573","toSide":"bottom","label":"application of"},
		{"id":"f531974b63b9f3af","fromNode":"bfea9e8ea14b1e8c","fromSide":"bottom","toNode":"25e247af6edde326","toSide":"top"},
		{"id":"d5c22a48faa5d394","fromNode":"21db41be47a1dc44","fromSide":"right","toNode":"62d32d2234aba4ca","toSide":"left"},
		{"id":"553f8624cfbd107b","fromNode":"21db41be47a1dc44","fromSide":"top","toNode":"2a34dd40cf46f18b","toSide":"bottom"},
		{"id":"8f14670ceca0c089","fromNode":"21db41be47a1dc44","fromSide":"left","toNode":"62cd518c32f352c0","toSide":"right"},
		{"id":"7e483b9752d9cc16","fromNode":"ec0ead682eea578d","fromSide":"bottom","toNode":"b751d66f931ec651","toSide":"top"},
		{"id":"597f633161b2e057","fromNode":"5a944679fcbfeeb7","fromSide":"bottom","toNode":"432b8480f31c5b85","toSide":"top"},
		{"id":"f5bc5e4ed67d3239","fromNode":"38c73acdb834bfe7","fromSide":"top","toNode":"66c5e793340a9152","toSide":"bottom","label":"ABI"},
		{"id":"2ca5a2ed77b131aa","fromNode":"56bd2288db00c1d7","fromSide":"top","toNode":"4b6685a698c83a60","toSide":"bottom","label":"compiler"},
		{"id":"90aaab194b6c0de7","fromNode":"56bd2288db00c1d7","fromSide":"top","toNode":"275c6fb82ced8ddd","toSide":"bottom","label":"ABI"},
		{"id":"c5fc5b01f3177cfc","fromNode":"38c73acdb834bfe7","fromSide":"right","toNode":"b6eeb74cc8e8e60c","toSide":"top"},
		{"id":"d1772112f8e581ef","fromNode":"bfea9e8ea14b1e8c","fromSide":"bottom","toNode":"78976f9f9743e5f9","toSide":"top"},
		{"id":"ced8439160fdcd0a","fromNode":"fab1ca3ecd541c0f","fromSide":"top","toNode":"b46995e368518f62","toSide":"bottom","label":"Cheerp Compiler"},
		{"id":"16000b5e2fc6653c","fromNode":"fab1ca3ecd541c0f","fromSide":"top","toNode":"2b7912f0e6f79ea9","toSide":"bottom","label":"Emscripten"},
		{"id":"83cd4f5573acd146","fromNode":"ec0ead682eea578d","fromSide":"right","toNode":"d1174af4ddc53320","toSide":"left"},
		{"id":"675d79edbaf67462","fromNode":"21db41be47a1dc44","fromSide":"bottom","toNode":"8122b86fd2fcfcca","toSide":"top"},
		{"id":"76ecdd416dfeb147","fromNode":"8251f04cfb63e1ec","fromSide":"bottom","toNode":"38c73acdb834bfe7","toSide":"top","label":"compiler"},
		{"id":"7362c64af46b4702","fromNode":"65e577b5c65a6ead","fromSide":"bottom","toNode":"30468a5d455b8c95","toSide":"top","label":"applies"},
		{"id":"98c9c20d835f3dc9","fromNode":"4b6685a698c83a60","fromSide":"bottom","toNode":"56bd2288db00c1d7","toSide":"top"},
		{"id":"e26ec370545a8d06","fromNode":"8e56de0622673567","fromSide":"top","toNode":"2829552b12ab7d0b","toSide":"bottom","label":"uses"},
		{"id":"c591da66b4452a37","fromNode":"8e56de0622673567","fromSide":"bottom","toNode":"b9fa352103d33663","toSide":"top","label":"implements"},
		{"id":"e2118957b6990e0c","fromNode":"aa1aab46e3db1b1f","fromSide":"bottom","toNode":"b9fa352103d33663","toSide":"top"},
		{"id":"4b29a0b335e8987a","fromNode":"0b4be4e95f15a856","fromSide":"bottom","toNode":"b9fa352103d33663","toSide":"top"},
		{"id":"e2bdc639b539e369","fromNode":"46a7daf8f8ce22c4","fromSide":"bottom","toNode":"b9fa352103d33663","toSide":"top","label":"generalizes"},
		{"id":"7b8cfb15ab0da402","fromNode":"f06ba3014020f793","fromSide":"bottom","toNode":"46a7daf8f8ce22c4","toSide":"top","label":"explains"},
		{"id":"d67f9cc2f2778488","fromNode":"0ecbf909d815588d","fromSide":"bottom","toNode":"46a7daf8f8ce22c4","toSide":"top","label":"first described"},
		{"id":"e100fb80c458d1fb","fromNode":"531ffd5c19e47084","fromSide":"left","toNode":"2829552b12ab7d0b","toSide":"top","label":"equates"},
		{"id":"4f827a1605460ed8","fromNode":"f464c620669df2ff","fromSide":"bottom","toNode":"2829552b12ab7d0b","toSide":"top","label":"textbook describing"}
	]
}